from mlflow.deployments.plugin_manager import DeploymentPlugins
from mlflow.utils import experimental


listType = list
plugin_store = DeploymentPlugins(auto_register=True)


@experimental
def create_deployment(target, model_uri, flavor=None, **kwargs):
    """
    Deploy a model to the specified target.

    :param target: String containing the deployment target name
    :param model_uri: String URI to the model. A local path, a 'runs:/' URI, or a
                      remote storage URI (e.g., an 's3://' URI). For more information
                      about supported remote URIs for model artifacts, see
                      https://mlflow.org/docs/latest/tracking.html#artifact-stores
    :param flavor: The name of the model flavor to use for deployment. If flavor is unspecified,
                   a default flavor will be chosen for model deployment.
    :param kwargs: Target-specific keyword-arguments for deployment creation
    :return: dict, A python dictionary with keys ``deployment_id`` and ``flavor``
    """
    deployment = plugin_store[target].create(model_uri, flavor, **kwargs)
    if not isinstance(deployment, dict) or \
            not all([k in ('deployment_id', 'flavor') for k in deployment]):
        raise TypeError("Deployment creation must return a dictionary with values for "
                        "``deployment_id`` and ``flavor``")
    return deployment


@experimental
def delete_deployment(target, deployment_id, **kwargs):
    """
    Delete the deployment with ID `deployment_id` from the specified target.

    :param target: String containing the deployment target name
    :param deployment_id: String ID of deployment to delete
    :param kwargs: Target-specific keyword-arguments for deployment deletion
    :return: None
    """
    plugin_store[target].delete(deployment_id, **kwargs)


@experimental
def update_deployment(target, deployment_id, model_uri=None, flavor=None, **kwargs):
    """
    Update the deployment with ID `deployment_id` in the specified target. You can update the
    URI of the model, the flavor of the deployed model (in which case the model URI must also
    be specified), and/or any target-specific attributes of the deployment (via `kwargs`).


    :param target: String containing the deployment target name
    :param deployment_id: String ID of deployment to update
    :param model_uri: String URI of a new model to deploy. A local path, a 'runs:/' URI, or a
                      remote storage URI (e.g., an 's3://' URI). For more information
                      about supported remote URIs for model artifacts, see
                      https://mlflow.org/docs/latest/tracking.html#artifact-stores
    :param flavor: The name of the flavor of the model to use for deployment. If provided,
                   `model_uri` must also be specified. If flavor is unspecified but model_uri is
                   specified, a default flavor will be chosen and the deployment will be updated
                   using that flavor.
    :param kwargs: Target-specific keyword-arguments for deployment update
    :return: None
    """
    if flavor and not model_uri:
        raise RuntimeError("``update`` has got ``flavor`` but not ``model_uri``")
    if not any([flavor, model_uri, kwargs]):
        raise RuntimeError("``update`` did not get any arguments")
    return plugin_store[target].update(deployment_id, model_uri, flavor, **kwargs)


@experimental
def list_deployments(target, **kwargs):  # pylint: disable=W0622
    """
    List the IDs of all model deployments in the specified target. These IDs
    can be used with the :py:func:`mlflow.deployments.delete_deployment`,
    :py:func:`mlflow.deployments.update_deployment`, and
    :py:func:`mlflow.deployments.get_deployment` commands.

    :param target: String containing the deployment target name
    :param kwargs: Target-specific keyword-arguments for listing deployments
    :return: A list of string deployment IDs
    """
    ids = plugin_store[target].list(**kwargs)
    if not isinstance(ids, listType):
        raise TypeError("IDs must be returned as a ``list``")
    return ids


@experimental
def get_deployment(target, deployment_id, **kwargs):
    """
    Returns a dictionary describing the deployment with ID `deployment_id` in the specified
    target. The format and fields of the returned dictionary may vary across deployment targets.

    :param target: String containing the deployment target name
    :param deployment_id: The ID generated by the plugin while creating the deployment
    :param kwargs: Target-specific keyword-arguments
    :return: A dictionary describing the deployment with ID `deployment_id`
    """
    desc = plugin_store[target].get(deployment_id, **kwargs)
    if not isinstance(desc, dict):
        raise TypeError("Description must be returned as a dictionary")
    return desc
